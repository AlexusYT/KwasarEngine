# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main", "AlexusYT-ci-config" ]
  pull_request:
    branches: [ "main", "AlexusYT-ci-config" ]

jobs:
  build:
    runs-on: ${{ matrix.os.version }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os:
          - name: ubuntu
            version: ubuntu-latest
          - name: windows
            version: windows-latest
        build_type: [ Release ]

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install tools
        if: matrix.os.name == 'ubuntu'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build libsigc++-3.0-dev libpng-dev libglm-dev libepoxy-dev libglfw3-dev libsqlitecpp-dev nlohmann-json3-dev libgtkmm-4.0-dev

      - name: Install tools
        if: matrix.os.name == 'windows'
        shell: C:\msys64\usr\bin\bash.exe {0}
        run: |
          /c/msys64/usr/bin/pacman --noconfirm -S mingw-w64-x86_64-ninja mingw-w64-x86_64-pkgconf mingw-w64-x86_64-libsigc++-3.0 mingw-w64-x86_64-libpng mingw-w64-x86_64-glm mingw-w64-x86_64-libepoxy mingw-w64-x86_64-glfw mingw-w64-x86_64-nlohmann-json mingw-w64-x86_64-gtkmm-4.0
          echo "/c/msys64/usr/bin:/c/msys64/bin:/c/msys64/mingw64/bin:" >> $GITHUB_PATH
        # choco install ninja
      - name: Configure CMake Ubuntu
        if: matrix.os.name == 'ubuntu'
        run: cmake "-B ${{ steps.strings.outputs.build-output-dir }}" "--preset=ci-${{ matrix.os.name }}" "-S ${{ github.workspace }}"

      - name: Configure CMake Windows
        if: matrix.os.name == 'windows'
        shell: C:\msys64\usr\bin\bash.exe {0}
        run: cmake "-B ${{ steps.strings.outputs.build-output-dir }}" "--preset=ci-${{ matrix.os.name }}" "-S ${{ github.workspace }}"

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} #--config ${{ matrix.build_type }}

        #- name: Test
        #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest --build-config ${{ matrix.build_type }}
