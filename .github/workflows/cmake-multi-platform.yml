# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  pull_request:
    branches: [ "main", "AlexusYT-ci-config" ]

jobs:
  build-windows:
    runs-on: windows-2025
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "install-output-dir=${{ github.workspace }}/install" >> "$GITHUB_OUTPUT"

      - name: Install tools
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja mingw-w64-x86_64-pkgconf mingw-w64-x86_64-libsigc++-3.0 mingw-w64-x86_64-libspng 
            mingw-w64-x86_64-libjpeg-turbo mingw-w64-x86_64-glm mingw-w64-x86_64-libepoxy mingw-w64-x86_64-glfw 
            mingw-w64-x86_64-nlohmann-json mingw-w64-x86_64-gtest mingw-w64-x86_64-curl-gnutls mingw-w64-x86_64-openssl 
            mingw-w64-x86_64-zlib

      - name: Configure CMake
        shell: msys2 {0}
        run: cmake "-B ${{ steps.strings.outputs.build-output-dir }}" "--preset=ci-windows" "-S ${{ github.workspace }}"

      - name: Build
        shell: msys2 {0}
        run: |
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --target install #--config ${{ matrix.build_type }}

  build-linux:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "install-output-dir=${{ github.workspace }}/install" >> "$GITHUB_OUTPUT"

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build libxi-dev libx11-dev libxft-dev libxext-dev  libxinerama-dev xorg-dev libglu1-mesa-dev libxcursor-dev libxdamage-dev libsigc++-3.0-dev libspng-dev libturbojpeg0-dev libglm-dev libepoxy-dev libglfw3-dev nlohmann-json3-dev libgtest-dev libgmock-dev libcurl4-gnutls-dev

      - name: Configure CMake
        run: |
          cmake -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.install-output-dir }} -DCMAKE_CXX_COMPILER=g++-14 "-B ${{ steps.strings.outputs.build-output-dir }}" "--preset=ci-ubuntu" "-S ${{ github.workspace }}"

      - name: Build
        run: |
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --target install #--config ${{ matrix.build_type }}

        #- name: Test
        #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest --build-config ${{ matrix.build_type }}
