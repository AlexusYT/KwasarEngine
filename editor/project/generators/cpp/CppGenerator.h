//  MegaEngineRing is a program that can speed up game development.
//  Copyright (C) 2024-2025. Timofeev (Alexus_XX) Alexander
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with this program; if not, write to the Free Software Foundation, Inc.,
//  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

//
// Created by alexus on 20.01.24.
//

#ifndef CPPGENERATOR_H
#define CPPGENERATOR_H
#include <project/generators/GeneratorElement.h>

namespace ked {
class CppGenerator {
	std::vector<std::string> includes;
	std::vector<GeneratorElement*> elements;

public:
	[[nodiscard]] const std::vector<std::string> &getIncludes() const { return includes; }

	void setIncludes(const std::vector<std::string> &pIncludes) { includes = pIncludes; }

	void addInclude(const std::string &pInclude) { includes.emplace_back(pInclude); }

	[[nodiscard]] const std::vector<GeneratorElement*> &getElements() const { return elements; }

	void setElements(const std::vector<GeneratorElement*> &pElements) { elements = pElements; }

	void addElement(GeneratorElement* pElement) { elements.emplace_back(pElement); }

	ke::ReportMessagePtr saveHeader(const std::filesystem::path &pPath) const {
		create_directories(pPath.parent_path());
		std::ofstream stream;
		try {
			stream.exceptions(std::_S_badbit | std::_S_eofbit | std::_S_failbit);
			stream.open(pPath);
		}
		catch (...) {
			auto msg = ke::ReportMessage::create();
			msg->setTitle("Failed to save header file.");
			msg->setMessage("Exception thrown");
			msg->addInfoLine("Trying to save file at {}", pPath.string());
			return msg;
		}
		//language=cpp
		stream << R"(/*
 * This file is automatically generated. DO NOT EDIT! Your changes will be overwritten by the editor.
 */
)";
		for (const auto &include: includes) { stream << std::format("#include <{}>\n", include); }
		stream << "\n";

		return nullptr;
	}

	ke::ReportMessagePtr saveSource(const std::filesystem::path &pPath) const {
		create_directories(pPath.parent_path());
		std::ofstream stream;
		try {
			stream.exceptions(std::_S_badbit | std::_S_eofbit | std::_S_failbit);
			stream.open(pPath);
		}
		catch (...) {
			auto msg = ke::ReportMessage::create();
			msg->setTitle("Failed to save source file.");
			msg->setMessage("Exception thrown");
			msg->addInfoLine("Trying to save file at {}", pPath.string());
			return msg;
		}
		//language=cpp
		stream << R"(/*
 * This file is automatically generated. DO NOT EDIT! Your changes will be overwritten by the editor.
 */
)";

		//for (const auto &element: elements) { stream << element->getForSource(0); }
		return nullptr;
	}
};
} // namespace ked


#endif //CPPGENERATOR_H
